@page "/ExposingSecrets"
@model ITSummit2022App.Pages.ExposingSecrets

@{
    Layout = "_Layout";
}

<h3>Exposing Secrets</h3>
<div class="tag">Introduction</div>
<p>Software applications are complex structures with many interacting elements behind the scenes.<br/><br/><img src="ProjectStructureExample.png" width="100%" alt="Project Structure Example"/><br/><br/>Knowing the underlying project structures helps attackers determine what is vulnerable. The 'www' PUBLIC folder is always a good target to explore. Even though the www folder isn't viewable like a list, brute forcing NAMES of files using an automated program could reveal files that attackers were not meant to see - certainly targeting COMMON file names like appsettings.json or secret.txt or mysql-entrypoint.sql.</p>
<p>Attackers don't get a full list of Pages they can explore either, but brute forcing that might expose certain ADMIN pages hidden under an /admin prefix that are not protected with a login context. Accessing a 'hidden' admin page the developer simply didn't think you'd find would be ideal.</p>
<div class="tag">Secret Files - Try it yourself</div>
<p>To test out viewing 'hidden' files, remove the page name /ExposingSecrets from the URL in the browser. Then type in something similar to this: <span class="input">/secret.txt</span> I didn't need to provide you this URL, but yet it existed in the wrong place at the right time.</p>
<div class="tag">Secrets In Embedded Javascript</div>
<p>Another mistake developers make is expose keys inside Javascript sent in addition to the webpage. Javascript is hidden from the user, but other developers and attackers can DOWNLOAD the javascript files just like a text file and view the source code. If there are Access Tokens embedded inside the client-side javascript it means attackers can use them and impersonate you by using the same token themselves.</p>
<div class="tag">Secrets In GitHub Repositories</div>
<p>I mentioned the appsettings.json files above and how they contain passwords. It is extremely common for developers to upload these files to Code Repositories like GitHub on accident exposing PRODUCTION keys to anyone who has access to the repository. An even more catastrophic situation is uploading appsettings.json to a PUBLIC repository, because there are free tools for automatically searching for credentials files and its inevitable a malicious actor finds yours in that scenario.</p>
<div class="tag">How to fix</div>
<p>I personally like to save an appsettings.Example.json in my projects which contain cleaned versions of my appsettings.json structure without any sensitive data. I commit THAT to a github repository and ignore any other appsettings*.json patterns. Remaking an appsettings.json file blind is a pain if there is configuration requirements hidden in the project that only reveals itself when that configuration is missing.</p>
<div class="break"></div>