@page "/AccessControls";
@model ITSummit2022App.Pages.AccessControls

@{
    Layout = "_Layout";
}

<h3>Access Controls</h3>
<div class="tag">Introduction</div>
<p>It is common for software to provide personalized content based on your context. It matters whether you are NOT logged in, logged in as a customer, as a vendor, as an admin, etc, and each of these roles may have different permissions, actions, and views. Developers will create a single dynamic page which should care about the user context and modify itself accoringly, but sometimes those controls are neglected or missing.</p>
<div class="tag">Example 1 - Unprotected Dynamic Pages</div>
<p>Hidden data in plain sight is not the only way to collect information. Imagine a page called <a href="Profile?user=1" target="_blank">Profile?user=1</a> where the currently logged in user can view their profile. It is harmless until you consider the parameter&nbsp;<span class="input">user=1</span>&nbsp;which an attacker may assume means 'Get the profile for the user who has the ID of 1'. What happens if you put in 2 in that parameter?</p>
<div class="tag">Try it yourself</div>
<form>
<label for="example_id"> <span>User ID:</span>
  <input type="number" id="user_id" name="example_id" placeholder="..." value="2" oninput="update_url()"/>
</label>
    <p>The URL would then become this:</p>
    <a id="actual_link" href="Profile?user=2" target="_blank">Profile?user=<span class="input" id="example_id_input">2</span></a>
</form>
<p>An automated program written by a single guy during lunch break could test out a million profiles in a second. This is exactly how this bug was found and reported: <a href="https://darkport.co.uk/blog/moonpig-vulnerability/" target="_blank">https://darkport.co.uk/blog/moonpig-vulnerability/</a>. Although it was slightly more complicated, it wasn't MUCH more than what you've seen already and Moonpig dropped the ball despite a big budget AND 2 years of prior notice at their disposal.</p>
<div class="tag">Solutions</div>
<p>For dynamic pages, use a COOKIE for authentication, and generate the page based on the user nametag in the COOKIE. That way a <span class="input">user</span> parameter isn't necessary in the URL revealing the UserID. Additionally swapping from sequential integer IDs to RANDOM character IDs like a GUID would increase the search space of vulnerable pages.<br/><br/>For comprehensive examples and solutions refer to this reference: <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">https://owasp.org/Top10/A01_2021-Broken_Access_Control/</a></p>

@section Scripts
{
    <script>
        function update_url() {
            document.getElementById("actual_link").href = "Profile?user=" + document.getElementById("user_id").value;
            document.getElementById("example_id_input").innerText = document.getElementById("user_id").value;
        }
    
    </script>
}
